
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ##################
> library(ChemmineR)
> ##################
> 
> #list sdfsets in directory
> files<-list.files(pattern=".sdf", recursive=F)
> 
> #load first
> sdfset<-read.SDFset(files[1])
Warning message:
In read.SDFset(files[1]) :
  1 invalid SDFs detected. To fix, run: valid <- validSDF(sdfset); sdfset <- sdfset[valid]
> 
> #from Chemminetools repo, make function to clean char input that causes escape errors
> ###########################
> cleanUp <- function(input){
+      input <- gsub("[^a-zA-Z_0-9 -]", " ", input, perl=TRUE) # remove weird chars
+      gsub("^\\s*(.{1,80}).*\\s*$", "\\1", input, perl=TRUE) # limit length to 80 and remove whitespace
+ }
> ###########################
> 
> # clean up input:
> ########################################
> sdfset <- sdfset[validSDF(sdfset)]
> cids <- sdfid(sdfset)
> cids <- cleanUp(cids)
> sdfset <- sdfset[! duplicated(cids)]
> cids <- cids[! duplicated(cids)]
> ########################################
> 
> 
> #assign names from sdfid slot
> cid(sdfset)<-sdfid(sdfset)
> 
> cid(sdfset)<-gsub("\\?", "X", cid(sdfset))
> cid(sdfset)<-gsub("\\=", "_", cid(sdfset))
> cid(sdfset)<-gsub("\\/", "_", cid(sdfset))
> cid(sdfset)<-gsub(" ", "_", cid(sdfset))
> cid(sdfset)<-gsub("\\(", "X", cid(sdfset))
> cid(sdfset)<-gsub("\\)", "X", cid(sdfset))
> 
> 
> #apset validation to weed out broken molecules
> apset<-sdf2ap(sdfset)
> sdfset<-sdfset[!sapply(as(apset,"list"), length)==1]
> 
> 
> 
> #spit out clean SDF
> write.SDF(sdfset, file=paste(gsub(".sdf", "", files[1]), "_Cleaned.sdf", sep=""), sig=T, cid=T)
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
  1.272   0.044   1.317 
